package com.chengshicheng.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chengshicheng.project.greendao.OrderQuery;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_QUERY".
*/
public class OrderQueryDao extends AbstractDao<OrderQuery, Long> {

    public static final String TABLENAME = "ORDER_QUERY";

    /**
     * Properties of entity OrderQuery.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrderNum = new Property(0, Long.class, "OrderNum", true, "_id");
        public final static Property OrderCode = new Property(1, String.class, "OrderCode", false, "ORDER_CODE");
        public final static Property OrderName = new Property(2, String.class, "OrderName", false, "ORDER_NAME");
        public final static Property LastQueryTime = new Property(3, long.class, "LastQueryTime", false, "LAST_QUERY_TIME");
        public final static Property IsSuccess = new Property(4, boolean.class, "isSuccess", false, "IS_SUCCESS");
        public final static Property State = new Property(5, String.class, "State", false, "STATE");
        public final static Property Traces2Json = new Property(6, String.class, "Traces2Json", false, "TRACES2_JSON");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property ToTop = new Property(8, boolean.class, "toTop", false, "TO_TOP");
    }


    public OrderQueryDao(DaoConfig config) {
        super(config);
    }
    
    public OrderQueryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_QUERY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: OrderNum
                "\"ORDER_CODE\" TEXT," + // 1: OrderCode
                "\"ORDER_NAME\" TEXT," + // 2: OrderName
                "\"LAST_QUERY_TIME\" INTEGER NOT NULL ," + // 3: LastQueryTime
                "\"IS_SUCCESS\" INTEGER NOT NULL ," + // 4: isSuccess
                "\"STATE\" TEXT," + // 5: State
                "\"TRACES2_JSON\" TEXT," + // 6: Traces2Json
                "\"REMARK\" TEXT," + // 7: remark
                "\"TO_TOP\" INTEGER NOT NULL );"); // 8: toTop
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_QUERY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderQuery entity) {
        stmt.clearBindings();
 
        Long OrderNum = entity.getOrderNum();
        if (OrderNum != null) {
            stmt.bindLong(1, OrderNum);
        }
 
        String OrderCode = entity.getOrderCode();
        if (OrderCode != null) {
            stmt.bindString(2, OrderCode);
        }
 
        String OrderName = entity.getOrderName();
        if (OrderName != null) {
            stmt.bindString(3, OrderName);
        }
        stmt.bindLong(4, entity.getLastQueryTime());
        stmt.bindLong(5, entity.getIsSuccess() ? 1L: 0L);
 
        String State = entity.getState();
        if (State != null) {
            stmt.bindString(6, State);
        }
 
        String Traces2Json = entity.getTraces2Json();
        if (Traces2Json != null) {
            stmt.bindString(7, Traces2Json);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
        stmt.bindLong(9, entity.getToTop() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderQuery entity) {
        stmt.clearBindings();
 
        Long OrderNum = entity.getOrderNum();
        if (OrderNum != null) {
            stmt.bindLong(1, OrderNum);
        }
 
        String OrderCode = entity.getOrderCode();
        if (OrderCode != null) {
            stmt.bindString(2, OrderCode);
        }
 
        String OrderName = entity.getOrderName();
        if (OrderName != null) {
            stmt.bindString(3, OrderName);
        }
        stmt.bindLong(4, entity.getLastQueryTime());
        stmt.bindLong(5, entity.getIsSuccess() ? 1L: 0L);
 
        String State = entity.getState();
        if (State != null) {
            stmt.bindString(6, State);
        }
 
        String Traces2Json = entity.getTraces2Json();
        if (Traces2Json != null) {
            stmt.bindString(7, Traces2Json);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
        stmt.bindLong(9, entity.getToTop() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OrderQuery readEntity(Cursor cursor, int offset) {
        OrderQuery entity = new OrderQuery( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // OrderNum
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // OrderCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // OrderName
            cursor.getLong(offset + 3), // LastQueryTime
            cursor.getShort(offset + 4) != 0, // isSuccess
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // State
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Traces2Json
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.getShort(offset + 8) != 0 // toTop
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderQuery entity, int offset) {
        entity.setOrderNum(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastQueryTime(cursor.getLong(offset + 3));
        entity.setIsSuccess(cursor.getShort(offset + 4) != 0);
        entity.setState(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTraces2Json(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setToTop(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrderQuery entity, long rowId) {
        entity.setOrderNum(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrderQuery entity) {
        if(entity != null) {
            return entity.getOrderNum();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrderQuery entity) {
        return entity.getOrderNum() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
